diff --git a/CommonTools/Statistics/interface/SequentialCombinationGenerator.h b/CommonTools/Statistics/interface/SequentialCombinationGenerator.h
index 35ba5c8..17cb14e 100644
--- a/CommonTools/Statistics/interface/SequentialCombinationGenerator.h
+++ b/CommonTools/Statistics/interface/SequentialCombinationGenerator.h
@@ -99,7 +99,7 @@ private:
       }
       int mincnew2=cnew2[0];
       if (ss[n1-1]<mincnew2) return empty;
-      Vecint::iterator j1=find_if(ss.begin(),ss.end(),bind2nd(std::greater<int>(),mincnew2));
+      Vecint::iterator j1=find_if(ss.begin(),ss.end(),bind(std::greater<int>(),std::placeholders::_1,mincnew2));
       if (ss.end()-j1 < p[i]) return empty;
       Vecint sss(j1,ss.end());
       for (int j=0;j<p[i];j++){cnew[ip+j]=cnew2[j]=sss[j];}
diff --git a/CondFormats/Serialization/python/condformats_serialization_generate.py b/CondFormats/Serialization/python/condformats_serialization_generate.py
index e0d7303..ca2e3e2 100755
--- a/CondFormats/Serialization/python/condformats_serialization_generate.py
+++ b/CondFormats/Serialization/python/condformats_serialization_generate.py
@@ -29,7 +29,7 @@ import subprocess
 
 import clang.cindex
 
-clang_version = None
+clang_version = (6,0,1)
 
 headers_template = '''
 #include "{headers}"
@@ -420,7 +420,7 @@ class SerializationCodeGenerator(object):
 
     def __init__(self, scramFlags=None):
 
-        self.cmssw_base = os.getenv('CMSSW_BASE')
+        self.cmssw_base = os.path.realpath(os.getenv('CMSSW_BASE'))
         if self.cmssw_base is None:
             raise Exception('CMSSW_BASE is not set.')
         logging.debug('cmssw_base = %s', self.cmssw_base)
@@ -475,7 +475,7 @@ class SerializationCodeGenerator(object):
         # On macOS we need to costruct library search path
         if "SCRAM_ARCH" in os.environ and re.match('osx10*',os.environ['SCRAM_ARCH']):
             cindex=clang.cindex
-            libpath=os.path.dirname(os.path.realpath(clang.cindex.__file__))+"/../../lib"
+            libpath=os.path.dirname(os.path.realpath(clang.cindex.__file__))+"/../../../../lib"
             cindex.Config.set_library_path(libpath)
             index = cindex.Index.create()
         else :
@@ -493,7 +493,8 @@ class SerializationCodeGenerator(object):
 
             # Ignore some known warnings
             if diagnostic['spelling'].startswith('argument unused during compilation') \
-                or diagnostic['spelling'].startswith('unknown warning option'):
+                or diagnostic['spelling'].startswith('unknown warning option') \
+                or diagnostic['spelling'].startswith('unknown attribute'):
                 logf = logging.debug
 
             logf('Diagnostic: [%s] %s', get_severity_name(diagnostic['severity']), diagnostic['spelling'])
diff --git a/DataFormats/Candidate/src/classes_def.xml b/DataFormats/Candidate/src/classes_def.xml
index 2484a36..b29ac00 100644
--- a/DataFormats/Candidate/src/classes_def.xml
+++ b/DataFormats/Candidate/src/classes_def.xml
@@ -242,7 +242,6 @@
   <class name="std::pair<std::basic_string<char>,edm::Ptr<reco::Candidate> >" />
   <class name="std::vector<std::pair<std::basic_string<char>,edm::Ptr<reco::Candidate> > >" />
 
-  <class pattern="std::iterator<std::random_access_iterator_tag,edm::RefToBase<reco::Candidate>*>" />
 </selection>
 <exclusion>
   <class name="edm::OwnVector<reco::Candidate, edm::ClonePolicy<reco::Candidate> >">
diff --git a/DataFormats/Candidate/test/testCandidate.cc b/DataFormats/Candidate/test/testCandidate.cc
index b130d43..2d707dc 100644
--- a/DataFormats/Candidate/test/testCandidate.cc
+++ b/DataFormats/Candidate/test/testCandidate.cc
@@ -66,7 +66,7 @@ void testCandidate::checkAll() {
 
   reco::Particle::Charge q( 1 );
   int x = 123, y0 = 111, y1 = 222;
-  std::auto_ptr<reco::Candidate> c( new test::DummyCandidate1( p, q, x, y0, y1 ) );
+  std::unique_ptr<reco::Candidate> c( new test::DummyCandidate1( p, q, x, y0, y1 ) );
   CPPUNIT_ASSERT( c->charge() == q );
   CPPUNIT_ASSERT( (c->p4() - p).M2() < 1.e-4 );
   CPPUNIT_ASSERT( c->numberOfDaughters() == 0 );
diff --git a/DataFormats/GEMDigi/src/classes_def.xml b/DataFormats/GEMDigi/src/classes_def.xml
index 5b7e0ea..b0e4266 100644
--- a/DataFormats/GEMDigi/src/classes_def.xml
+++ b/DataFormats/GEMDigi/src/classes_def.xml
@@ -9,7 +9,8 @@
 <class name="MuonDigiCollection<GEMDetId,GEMDigi>"/> 
 <class name="edm::Wrapper<MuonDigiCollection<GEMDetId,GEMDigi> >" splitLevel="0"/> 
 
-<class name="GEMVfatStatusDigi" ClassVersion="3">
+<class name="GEMVfatStatusDigi" ClassVersion="4">
+ <version ClassVersion="4" checksum="2613036534"/>
  <version ClassVersion="3" checksum="569767420"/>
 </class>
 <class name="std::vector<GEMVfatStatusDigi>"/>
@@ -25,7 +26,8 @@
 <class name="MuonDigiCollection<uint16_t,GEMGEBStatusDigi>"/>
 <class name="edm::Wrapper<MuonDigiCollection<uint16_t,GEMGEBStatusDigi> >" splitLevel="0"/>
 
-<class name="GEMAMCStatusDigi" ClassVersion="-1">
+<class name="GEMAMCStatusDigi" ClassVersion="0">
+ <version ClassVersion="0" checksum="4117124668"/>
   <version ClassVersion="-1" checksum="2990326637"/>
 </class>
 <class name="std::vector<GEMAMCStatusDigi>"/>
diff --git a/DataFormats/L1Trigger/src/classes_def.xml b/DataFormats/L1Trigger/src/classes_def.xml
index bda2ba8..c3224c6 100644
--- a/DataFormats/L1Trigger/src/classes_def.xml
+++ b/DataFormats/L1Trigger/src/classes_def.xml
@@ -155,7 +155,8 @@
   <class name="edm::Wrapper<std::vector<l1extra::L1ParticleMap> >"/>
   <class name="edm::Wrapper<std::vector<l1extra::L1HFRings> >"/>
 
-  <class name="HOTPDigiTwinMux" ClassVersion="14">
+  <class name="HOTPDigiTwinMux" ClassVersion="15">
+   <version ClassVersion="15" checksum="2174527813"/>
     <version ClassVersion="14" checksum="66417560"/>
   </class>
   <class name="std::vector<HOTPDigiTwinMux>"/>
diff --git a/DataFormats/PatCandidates/src/JetCorrFactors.cc b/DataFormats/PatCandidates/src/JetCorrFactors.cc
index ecb73e9..252fec7 100644
--- a/DataFormats/PatCandidates/src/JetCorrFactors.cc
+++ b/DataFormats/PatCandidates/src/JetCorrFactors.cc
@@ -50,7 +50,7 @@ JetCorrFactors::Flavor
 JetCorrFactors::jecFlavor(std::string flavor) const
 {
   std::map<std::string, Flavor> flavors;
-  std::transform(flavor.begin(), flavor.end(), flavor.begin(), std::ptr_fun<int,int>(std::tolower));
+  std::transform(flavor.begin(), flavor.end(), flavor.begin(), [](int c){ return !std::tolower(c);} );
   flavors["uds"]=UDS; flavors["charm"]=CHARM; flavors["bottom"]=BOTTOM; flavors["gluon"]=GLUON; flavors["none"]=NONE;
   if(flavors.find(flavor)==flavors.end()){
     throw cms::Exception("InvalidRequest") << "You ask for a flavor, which does not exist. Available flavors are: \n"
diff --git a/DataFormats/TrackingRecHit/src/classes.h b/DataFormats/TrackingRecHit/src/classes.h
index 80fd1d1..7cee78a 100644
--- a/DataFormats/TrackingRecHit/src/classes.h
+++ b/DataFormats/TrackingRecHit/src/classes.h
@@ -22,7 +22,6 @@ namespace DataFormats_TrackingRecHit {
                              edm::ClonePolicy<TrackingRecHit> >::const_iterator,
               edm::OwnVector<TrackingRecHit,
                              edm::ClonePolicy<TrackingRecHit> >::const_iterator> pr1;    
-    std::auto_ptr<TrackingRecHitRef> ap1;
     edm::Wrapper<TrackingRecHitCollection> w1;
   };
 }
diff --git a/DataFormats/TrackingRecHit/src/classes_def.xml b/DataFormats/TrackingRecHit/src/classes_def.xml
index 74d6781..4998db2 100644
--- a/DataFormats/TrackingRecHit/src/classes_def.xml
+++ b/DataFormats/TrackingRecHit/src/classes_def.xml
@@ -33,7 +33,6 @@
   <class name="edm::RefVectorIterator<edm::OwnVector<TrackingRecHit,edm::ClonePolicy<TrackingRecHit> >,TrackingRecHit,edm::refhelper::FindUsingAdvance<edm::OwnVector<TrackingRecHit,edm::ClonePolicy<TrackingRecHit> >,TrackingRecHit> >"/>
   <!-- Warning: Unused class rule: std::iterator<*edm::Ref*> -->
   <!-- <class pattern="std::iterator<*edm::Ref*>"/> -->
-  <class name="std::auto_ptr<edm::Ref<edm::OwnVector<TrackingRecHit,edm::ClonePolicy<TrackingRecHit> >,TrackingRecHit,edm::refhelper::FindUsingAdvance<edm::OwnVector<TrackingRecHit,edm::ClonePolicy<TrackingRecHit> >,TrackingRecHit> > >"/>
   <class name="std::pair<edm::OwnVector<TrackingRecHit,edm::ClonePolicy<TrackingRecHit> >::const_iterator,edm::OwnVector<TrackingRecHit,edm::ClonePolicy<TrackingRecHit> >::const_iterator>"/>
   <class name="edm::RefProd<edm::OwnVector<TrackingRecHit, edm::ClonePolicy<TrackingRecHit> > >"/>
   <class name="edm::RefVector<edm::OwnVector<TrackingRecHit,edm::ClonePolicy<TrackingRecHit> >,TrackingRecHit,edm::refhelper::FindUsingAdvance<edm::OwnVector<TrackingRecHit,edm::ClonePolicy<TrackingRecHit> >,TrackingRecHit> >"/>
diff --git a/FWCore/Framework/src/EventSetupRecordProvider.cc b/FWCore/Framework/src/EventSetupRecordProvider.cc
index 87ba797..0138426 100644
--- a/FWCore/Framework/src/EventSetupRecordProvider.cc
+++ b/FWCore/Framework/src/EventSetupRecordProvider.cc
@@ -108,10 +108,10 @@ void
 EventSetupRecordProvider::setDependentProviders(const std::vector< std::shared_ptr<EventSetupRecordProvider> >& iProviders)
 {
    using std::placeholders::_1;
-   std::shared_ptr<DependentRecordIntervalFinder> newFinder = std::make_shared<DependentRecordIntervalFinder>(key());
+   std::shared_ptr<DependentRecordIntervalFinder> newFinder = std::shared_ptr<DependentRecordIntervalFinder>(new DependentRecordIntervalFinder(key()));
    
    std::shared_ptr<EventSetupRecordIntervalFinder> old = swapFinder(newFinder);
-   for_all(iProviders, std::bind(std::mem_fun(&DependentRecordIntervalFinder::addProviderWeAreDependentOn), &(*newFinder), _1));
+   for_all(iProviders, std::bind(std::mem_fn(&DependentRecordIntervalFinder::addProviderWeAreDependentOn), &(*newFinder), _1));
    //if a finder was already set, add it as a depedency.  This is done to ensure that the IOVs properly change even if the
    // old finder does not update each time a dependent record does change
    if(old.get() != nullptr) {
@@ -125,7 +125,7 @@ EventSetupRecordProvider::usePreferred(const DataToPreferredProviderMap& iMap)
   for_all(providers_, std::bind(&EventSetupRecordProvider::addProxiesToRecordHelper,this,_1,iMap));
   if (1 < multipleFinders_->size()) {
      
-     std::shared_ptr<IntersectingIOVRecordIntervalFinder> intFinder = std::make_shared<IntersectingIOVRecordIntervalFinder>(key_);
+     std::shared_ptr<IntersectingIOVRecordIntervalFinder> intFinder = std::shared_ptr<IntersectingIOVRecordIntervalFinder>(new IntersectingIOVRecordIntervalFinder(key_));
      intFinder->swapFinders(*multipleFinders_);
      finder_ = intFinder;
   }
diff --git a/FWCore/Framework/src/Schedule.cc b/FWCore/Framework/src/Schedule.cc
index fa23fa2..b93cfa0 100644
--- a/FWCore/Framework/src/Schedule.cc
+++ b/FWCore/Framework/src/Schedule.cc
@@ -80,7 +80,7 @@ namespace edm {
       bool postCalled = false;
       std::shared_ptr<TriggerResultInserter> returnValue;
       try {
-        maker::ModuleHolderT<TriggerResultInserter> holder(std::make_shared<TriggerResultInserter>(*trig_pset, iPrealloc.numberOfStreams()),static_cast<Maker const*>(nullptr));
+        maker::ModuleHolderT<TriggerResultInserter> holder(std::shared_ptr<TriggerResultInserter>(new TriggerResultInserter(*trig_pset, iPrealloc.numberOfStreams())),static_cast<Maker const*>(nullptr));
         holder.setModuleDescription(md);
         holder.registerProductsAndCallbacks(&preg);
         returnValue =holder.module();
@@ -131,7 +131,7 @@ namespace edm {
         bool postCalled = false;
 
         try {
-          maker::ModuleHolderT<T> holder(std::make_shared<T>(iPrealloc.numberOfStreams()),
+          maker::ModuleHolderT<T> holder(std::shared_ptr<T>(new T(iPrealloc.numberOfStreams())),
                                          static_cast<Maker const*>(nullptr));
           holder.setModuleDescription(md);
           holder.registerProductsAndCallbacks(&preg);
@@ -472,7 +472,7 @@ namespace edm {
     assert(0<prealloc.numberOfStreams());
     streamSchedules_.reserve(prealloc.numberOfStreams());
     for(unsigned int i=0; i<prealloc.numberOfStreams();++i) {
-      streamSchedules_.emplace_back(std::make_shared<StreamSchedule>(
+      streamSchedules_.emplace_back(std::shared_ptr<StreamSchedule>( new StreamSchedule(
         resultsInserter(),
         pathStatusInserters_,
         endPathStatusInserters_,
@@ -482,7 +482,7 @@ namespace edm {
         areg,processConfiguration,
         !hasSubprocesses,
         StreamID{i},
-        processContext));
+        processContext)));
     }
 
     //TriggerResults are injected automatically by StreamSchedules and are
diff --git a/FWCore/PythonParameterSet/interface/BoostPython.h b/FWCore/PythonParameterSet/interface/BoostPython.h
index ff271e3..ce3b12c 100644
--- a/FWCore/PythonParameterSet/interface/BoostPython.h
+++ b/FWCore/PythonParameterSet/interface/BoostPython.h
@@ -2,5 +2,6 @@
 #define FWCore_PythonParameterSet_BoostPython_h
 // avoids compiler warning
 #undef _POSIX_C_SOURCE
+#include <iostream>
 #include <boost/python.hpp>
 #endif
diff --git a/FWCore/Utilities/scripts/edmCheckClassTransients b/FWCore/Utilities/scripts/edmCheckClassTransients
index e4f9ab2..d7fc42b 100755
--- a/FWCore/Utilities/scripts/edmCheckClassTransients
+++ b/FWCore/Utilities/scripts/edmCheckClassTransients
@@ -60,11 +60,37 @@ oparser.add_option("-f","--rootmap", dest="rmfiles", action="append", default=[]
 
 #Need to not have ROOT load .rootlogon.(C|py) since it can cause interference.
 import ROOT
+import os
+import re
+# On macos with SIP enabled we need to construct our own lib search path
+if "SCRAM_ARCH" in os.environ and re.match('osx.*',os.environ['SCRAM_ARCH']) :
+    scram_arch=os.environ['SCRAM_ARCH']
+    localtop=os.path.abspath(os.path.dirname(os.path.realpath(__file__))+"/../../../..")
+    libpath=localtop+"/lib/"+scram_arch
+    extlibpath=localtop+"/external/"+scram_arch+"/lib"
+    ROOT.gSystem.AddDynamicPath(libpath)
+    ROOT.gSystem.AddDynamicPath(extlibpath)
+    if "RELEASETOP" in os.environ :
+       releasetop=os.environ['RELEASETOP']
+       rlibpath=releasetop+"/lib/"+scram_arch
+       rextlibpath=releasetop+"/external/"+scram_arch+"/lib"
+       ROOT.gSystem.AddDynamicPath(rlibpath)
+       ROOT.gSystem.AddDynamicPath(rextlibpath)
+    if "SPACK_LINK_DEPS" in os.environ :
+        for p in os.environ['SPACK_LINK_DEPS'].split(':') :
+            ppath=p+'/lib'
+            ROOT.gSystem.AddDynamicPath(ppath)
+    os.environ['DYLD_LIBRARY_PATH']=ROOT.gSystem.GetDynamicPath()
+    os.environ['LD_LIBRARY_PATH']=ROOT.gSystem.GetDynamicPath()
+    os.environ['DYLD_FALLBACK_LIBRARY_PATH']=ROOT.gSystem.GetDynamicPath()
+
+
 ROOT.PyConfig.DisableRootLogon = True
 
 #Keep ROOT from trying to use X11
 ROOT.gROOT.SetBatch(True)
 ROOT.gROOT.ProcessLine(".autodict")
+
 if options.library is None:
     print "Transient member check requires a specific library"
 else:
diff --git a/FWCore/Utilities/scripts/edmCheckClassVersion b/FWCore/Utilities/scripts/edmCheckClassVersion
index 3836d0c..a0b9ab7 100755
--- a/FWCore/Utilities/scripts/edmCheckClassVersion
+++ b/FWCore/Utilities/scripts/edmCheckClassVersion
@@ -1,5 +1,6 @@
 #!  /usr/bin/env python
 import string
+
 from optparse import OptionParser
 
 class XmlParser(object):
@@ -162,12 +163,38 @@ oparser.add_option("-g","--generate_new",dest="generate", action="store_true",de
 (options,args)=oparser.parse_args()
 
 #Need to not have ROOT load .rootlogon.(C|py) since it can cause interference.
+
 import ROOT
+import os
+import re
+# On macos with SIP enabled we need to construct our own lib search path
+if "SCRAM_ARCH" in os.environ and re.match('osx.*',os.environ['SCRAM_ARCH']) :
+    scram_arch=os.environ['SCRAM_ARCH']
+    localtop=os.path.abspath(os.path.dirname(os.path.realpath(__file__))+"/../../../..")
+    libpath=localtop+"/lib/"+scram_arch
+    extlibpath=localtop+"/external/"+scram_arch+"/lib"
+    ROOT.gSystem.AddDynamicPath(libpath)
+    ROOT.gSystem.AddDynamicPath(extlibpath)
+    if "RELEASETOP" in os.environ :
+       releasetop=os.environ['RELEASETOP']
+       rlibpath=releasetop+"/lib/"+scram_arch
+       rextlibpath=releasetop+"/external/"+scram_arch+"/lib"
+       ROOT.gSystem.AddDynamicPath(rlibpath)
+       ROOT.gSystem.AddDynamicPath(rextlibpath)
+    if "SPACK_LINK_DEPS" in os.environ :
+        for p in os.environ['SPACK_LINK_DEPS'].split(':') :
+            ppath=p+'/lib'
+            ROOT.gSystem.AddDynamicPath(ppath)
+    os.environ['DYLD_LIBRARY_PATH']=ROOT.gSystem.GetDynamicPath()
+    os.environ['LD_LIBRARY_PATH']=ROOT.gSystem.GetDynamicPath()
+    os.environ['DYLD_FALLBACK_LIBRARY_PATH']=ROOT.gSystem.GetDynamicPath()
+
 ROOT.PyConfig.DisableRootLogon = True
 
 #Keep ROOT from trying to use X11
 ROOT.gROOT.SetBatch(True)
 ROOT.gROOT.ProcessLine(".autodict")
+
 if options.library is None:
     if options.checkdict :
         print "Dictionary checks require a specific library"
diff --git a/Fireworks/Core/BuildFile.xml b/Fireworks/Core/BuildFile.xml
index 77f28f1..896d123 100644
--- a/Fireworks/Core/BuildFile.xml
+++ b/Fireworks/Core/BuildFile.xml
@@ -30,10 +30,10 @@
 <lib name="Geom"/>
 <lib name="GeomPainter"/>
 <lib name="GuiHtml"/>
-<architecture name="!amd64_clang8">
+<architecture name="!osx10_amd64_clang">
 <lib name="GX11"/>
 </architecture>
-<architecture name="amd64_clang8">
+<architecture name="osx10_amd64_clang">
 <lib name="GCocoa"/>
 </architecture>
 <lib name="RGL"/>
diff --git a/Fireworks/Core/bin/cmsShow.cc b/Fireworks/Core/bin/cmsShow.cc
index 4db1223..a56d90b 100644
--- a/Fireworks/Core/bin/cmsShow.cc
+++ b/Fireworks/Core/bin/cmsShow.cc
@@ -91,7 +91,7 @@ void run_app(TApplication &app, int argc, char **argv)
    edm::MessageLoggerQ::setMLscribe_ptr(std::shared_ptr<edm::service::AbstractMLscribe>(std::make_shared<SilentMLscribe>()));
    edm::MessageDrop::instance()->messageLoggerScribeIsRunning = edm::MLSCRIBE_RUNNING_INDICATOR;
    //---------------------
-   std::auto_ptr<CmsShowMain> pMain( new CmsShowMain(argc,argv) );
+   std::unique_ptr<CmsShowMain> pMain( new CmsShowMain(argc,argv) );
 
    // Avoid haing root handling various associated to an error and install 
    // back the default ones.
diff --git a/Fireworks/Core/interface/CmsShowMainBase.h b/Fireworks/Core/interface/CmsShowMainBase.h
index 9cc35d7..be6853b 100644
--- a/Fireworks/Core/interface/CmsShowMainBase.h
+++ b/Fireworks/Core/interface/CmsShowMainBase.h
@@ -149,18 +149,18 @@ protected:
 private:
    // The base class is responsible for the destruction of fwlite / FF
    // agnostic managers.
-   std::auto_ptr<FWModelChangeManager>   m_changeManager;
-   std::auto_ptr<FWColorManager>         m_colorManager;
-   std::auto_ptr<FWConfigurationManager> m_configurationManager;
-   std::auto_ptr<FWEventItemsManager>    m_eiManager;
-   std::auto_ptr<FWGUIManager>           m_guiManager;
-   std::auto_ptr<FWSelectionManager>     m_selectionManager;
-   std::auto_ptr<CmsShowTaskExecutor>    m_startupTasks;
-   std::auto_ptr<FWViewManagerManager>   m_viewManager;
+   std::unique_ptr<FWModelChangeManager>   m_changeManager;
+   std::unique_ptr<FWColorManager>         m_colorManager;
+   std::unique_ptr<FWConfigurationManager> m_configurationManager;
+   std::unique_ptr<FWEventItemsManager>    m_eiManager;
+   std::unique_ptr<FWGUIManager>           m_guiManager;
+   std::unique_ptr<FWSelectionManager>     m_selectionManager;
+   std::unique_ptr<CmsShowTaskExecutor>    m_startupTasks;
+   std::unique_ptr<FWViewManagerManager>   m_viewManager;
 
   
 
-   std::auto_ptr<SignalTimer>                 m_autoLoadTimer;
+   std::unique_ptr<SignalTimer>                 m_autoLoadTimer;
    
    // These are actually set by the concrete implementation via the setup 
    // method.
diff --git a/Fireworks/Core/interface/FWEveView.h b/Fireworks/Core/interface/FWEveView.h
index 743820d..746d37d 100644
--- a/Fireworks/Core/interface/FWEveView.h
+++ b/Fireworks/Core/interface/FWEveView.h
@@ -147,8 +147,8 @@ private:
    FWBoolParameter   m_useGlobalEnergyScale;
 
    std::shared_ptr<FWViewContextMenuHandlerGL>   m_viewContextMenu;
-   std::auto_ptr<FWViewContext> m_viewContext;
-   std::auto_ptr<FWViewEnergyScale> m_localEnergyScale;
+   std::unique_ptr<FWViewContext> m_viewContext;
+   std::unique_ptr<FWViewEnergyScale> m_localEnergyScale;
 
    mutable FWViewEnergyScaleEditor* m_viewEnergyScaleEditor;
 };
diff --git a/Fireworks/Core/interface/FWGUIManager.h b/Fireworks/Core/interface/FWGUIManager.h
index d679963..0161871 100644
--- a/Fireworks/Core/interface/FWGUIManager.h
+++ b/Fireworks/Core/interface/FWGUIManager.h
@@ -281,7 +281,7 @@ private:
 
    sigc::connection   m_modelChangeConn;
 
-   std::auto_ptr<CmsShowTaskExecutor> m_tasks;
+   std::unique_ptr<CmsShowTaskExecutor> m_tasks;
     std::vector<FWViewBase*> m_regionViews;
    int m_WMOffsetX, m_WMOffsetY, m_WMDecorH;
 };
diff --git a/Fireworks/Core/interface/FWXMLConfigParser.h b/Fireworks/Core/interface/FWXMLConfigParser.h
index 71c86a4..3fd325d 100644
--- a/Fireworks/Core/interface/FWXMLConfigParser.h
+++ b/Fireworks/Core/interface/FWXMLConfigParser.h
@@ -186,7 +186,7 @@ debug_config_state_machine(const char *where, const std::string &tag, int state)
 private:
    std::vector<std::pair<std::string, FWConfiguration *> > m_configs;
    enum STATES                                             m_state;
-   std::auto_ptr<FWConfiguration>                          m_first;
+   std::unique_ptr<FWConfiguration>                          m_first;
    //   unsigned int                                            m_currentConfigVersion;
    std::string                                             m_currentConfigName;
 };
diff --git a/Fireworks/Core/src/CmsShowMain.cc b/Fireworks/Core/src/CmsShowMain.cc
index 2bfe1a7..2cfdfc0 100644
--- a/Fireworks/Core/src/CmsShowMain.cc
+++ b/Fireworks/Core/src/CmsShowMain.cc
@@ -592,7 +592,7 @@ void
 CmsShowMain::openDataViaURL()
 {
    if (m_searchFiles.get() == nullptr) {
-      m_searchFiles = std::auto_ptr<CmsShowSearchFiles>(new CmsShowSearchFiles("",
+      m_searchFiles = std::unique_ptr<CmsShowSearchFiles>(new CmsShowSearchFiles("",
                                                                                "Open Remote Data Files",
                                                                                guiManager()->getMainFrame(),
                                                                                500, 400));
@@ -771,7 +771,7 @@ CmsShowMain::setLoadedAnyInputFileAfterStartup()
 void
 CmsShowMain::setupSocket(unsigned int iSocket)
 {
-   m_monitor = std::auto_ptr<TMonitor>(new TMonitor);
+   m_monitor = std::unique_ptr<TMonitor>(new TMonitor);
    TServerSocket* server = new TServerSocket(iSocket,kTRUE);
    if (server->GetErrorCode())
    {
diff --git a/Fireworks/Core/src/CmsShowMain.h b/Fireworks/Core/src/CmsShowMain.h
index a2820f9..70a952d 100644
--- a/Fireworks/Core/src/CmsShowMain.h
+++ b/Fireworks/Core/src/CmsShowMain.h
@@ -112,25 +112,25 @@ private:
    void checkLiveMode();
 
    // ---------- member data --------------------------------
-   std::auto_ptr<CmsShowNavigator>           m_navigator;
-   std::auto_ptr<FWLiteJobMetadataManager>   m_metadataManager;
-   std::auto_ptr<fireworks::Context>         m_context;
+   std::unique_ptr<CmsShowNavigator>           m_navigator;
+   std::unique_ptr<FWLiteJobMetadataManager>   m_metadataManager;
+   std::unique_ptr<fireworks::Context>         m_context;
 
    std::vector<std::string> m_inputFiles;
    bool                     m_loadedAnyInputFile;
    const TFile             *m_openFile;
 
-   std::auto_ptr<CmsShowSearchFiles>  m_searchFiles;
+   std::unique_ptr<CmsShowSearchFiles>  m_searchFiles;
 
    // live options
    bool                         m_live;
-   std::auto_ptr<SignalTimer>   m_liveTimer;
+   std::unique_ptr<SignalTimer>   m_liveTimer;
    int                          m_liveTimeout;
    UInt_t                       m_lastXEventSerial;
 
    bool                         m_noVersionCheck;
 
-   std::auto_ptr<TMonitor> m_monitor;
+   std::unique_ptr<TMonitor> m_monitor;
 };
 
 #endif
diff --git a/Fireworks/Core/src/FWConfigurationManager.cc b/Fireworks/Core/src/FWConfigurationManager.cc
index aede348..b3274a5 100644
--- a/Fireworks/Core/src/FWConfigurationManager.cc
+++ b/Fireworks/Core/src/FWConfigurationManager.cc
@@ -159,7 +159,7 @@ FWConfigurationManager::readFromOldFile(const std::string& iName) const
       message += iName;
       throw std::runtime_error(message.c_str());
    }
-   std::auto_ptr<FWConfiguration> config( reinterpret_cast<FWConfiguration*>(lConfig) );
+   std::unique_ptr<FWConfiguration> config( reinterpret_cast<FWConfiguration*>(lConfig) );
 
    setFrom( *config);
 }
diff --git a/Fireworks/Core/src/FWFileEntry.cc b/Fireworks/Core/src/FWFileEntry.cc
index f65bc07..d631371 100644
--- a/Fireworks/Core/src/FWFileEntry.cc
+++ b/Fireworks/Core/src/FWFileEntry.cc
@@ -354,7 +354,7 @@ void FWFileEntry::runFilter(Filter* filter, const FWEventItemsManager* eiMng)
 
    {
       TObjArray* branches = m_eventTree->GetListOfBranches();
-      std::auto_ptr<TIterator> pIt( branches->MakeIterator());
+      std::unique_ptr<TIterator> pIt( branches->MakeIterator());
       while (TObject* branchObj = pIt->Next())
       {
          TBranch* b = dynamic_cast<TBranch*> (branchObj);
diff --git a/Fireworks/Core/src/FWGUIValidatingTextEntry.cc b/Fireworks/Core/src/FWGUIValidatingTextEntry.cc
index 01995a9..b7fd2de 100644
--- a/Fireworks/Core/src/FWGUIValidatingTextEntry.cc
+++ b/Fireworks/Core/src/FWGUIValidatingTextEntry.cc
@@ -195,7 +195,7 @@ FWGUIValidatingTextEntry::showOptions() {
                                       0, GetHeight(), ax, ay, wdummy);
 
       //Wait to change focus for when the popup has already openned
-      std::auto_ptr<TTimer> timer( new ChangeFocusTimer(m_list->GetContainer()) );
+      std::unique_ptr<TTimer> timer( new ChangeFocusTimer(m_list->GetContainer()) );
       timer->TurnOn();
       //NOTE: this call has its own internal GUI event loop and will not return
       // until the popup has been shut down
diff --git a/Fireworks/Core/src/FWJobMetadataManager.cc b/Fireworks/Core/src/FWJobMetadataManager.cc
index eef9901..7f64f47 100644
--- a/Fireworks/Core/src/FWJobMetadataManager.cc
+++ b/Fireworks/Core/src/FWJobMetadataManager.cc
@@ -22,7 +22,7 @@ FWJobMetadataManager::~FWJobMetadataManager()
 void
 FWJobMetadataManager::update(FWJobMetadataUpdateRequest *request)
 {
-   std::auto_ptr<FWJobMetadataUpdateRequest> ptr(request);
+   std::unique_ptr<FWJobMetadataUpdateRequest> ptr(request);
    if (doUpdate(request))
       metadataChanged_();
 }
diff --git a/Fireworks/Core/test/unittest_fwconfiguration.cc b/Fireworks/Core/test/unittest_fwconfiguration.cc
index aac433c..4fafe6b 100644
--- a/Fireworks/Core/test/unittest_fwconfiguration.cc
+++ b/Fireworks/Core/test/unittest_fwconfiguration.cc
@@ -97,7 +97,7 @@ BOOST_AUTO_TEST_CASE( fwconfiguration )
    FWConfiguration::streamTo(std::cout, topConfig, "top");
 
    //Test manager
-   std::auto_ptr<Conf> pConf(new Conf() );
+   std::unique_ptr<Conf> pConf(new Conf() );
    
    FWConfigurationManager confMgr;
    confMgr.add("first", pConf.get() );
diff --git a/Fireworks/Electrons/plugins/FWConvTrackHitsDetailView.cc b/Fireworks/Electrons/plugins/FWConvTrackHitsDetailView.cc
index 88fa4d1..6fdb38d 100644
--- a/Fireworks/Electrons/plugins/FWConvTrackHitsDetailView.cc
+++ b/Fireworks/Electrons/plugins/FWConvTrackHitsDetailView.cc
@@ -175,8 +175,9 @@ FWConvTrackHitsDetailView::build (const FWModelId &id, const reco::Conversion* c
    for( TEveElement::List_i i = m_modules->BeginChildren(), end = m_modules->EndChildren(); i != end; ++i )
    {
       TEveGeoShape* gs = dynamic_cast<TEveGeoShape*>(*i);
+      const auto & rhs  = *(*(i));
       if (gs == nullptr && (*i != nullptr)) {
-         std::cerr << "Got a " << typeid(**i).name() << ", expecting TEveGeoShape. ignoring (it must be the clusters)." << std::endl;
+         std::cerr << "Got a " << typeid( rhs ).name() << ", expecting TEveGeoShape. ignoring (it must be the clusters)." << std::endl;
          continue;
       }
      // gs->SetMainTransparency(75);
diff --git a/Fireworks/Macros/FileUrlService.C b/Fireworks/Macros/FileUrlService.C
index 2842d47..e783c55 100644
--- a/Fireworks/Macros/FileUrlService.C
+++ b/Fireworks/Macros/FileUrlService.C
@@ -192,7 +192,7 @@ void FileUrlBase::SendString(TSocket& socket, TString& str, const TString& eh)
 
 void FileUrlBase::ReceiveString(TSocket& socket, TString& str, const TString& eh)
 {
-   std::auto_ptr<TMessage> msg(ReceiveMessage(socket, gkStringMT, eh));
+   std::unique_ptr<TMessage> msg(ReceiveMessage(socket, gkStringMT, eh));
    str.Streamer(*msg);
 }
 
@@ -207,7 +207,7 @@ void FileUrlBase::SendRequest(TSocket& socket, FileUrlRequest& request, const TS
 
 void FileUrlBase::ReceiveRequest(TSocket& socket, FileUrlRequest& request, const TString& eh)
 {
-   std::auto_ptr<TMessage> msg(ReceiveMessage(socket, gkUrlRequestMT, eh));
+   std::unique_ptr<TMessage> msg(ReceiveMessage(socket, gkUrlRequestMT, eh));
    request.Streamer(*msg);
 }
 
@@ -347,7 +347,7 @@ FileUrlServer::~FileUrlServer()
    delete fServerThread;
 
    {
-      std::auto_ptr<TList> socks(fMonitor->GetListOfActives());
+      std::unique_ptr<TList> socks(fMonitor->GetListOfActives());
       while ( ! socks->IsEmpty())
       {
          TObject *obj = socks->First();
@@ -661,7 +661,7 @@ public:
 
 TSocket* FileUrlClient::OpenSocket(const TString& eh)
 {
-   std::auto_ptr<TSocket> s(new TSocket(fHost, fPort));
+   std::unique_ptr<TSocket> s(new TSocket(fHost, fPort));
 
    if (!s->IsValid())
    {
@@ -690,7 +690,7 @@ void FileUrlClient::GetNextFile(Bool_t loop)
       return;
    }
 
-   std::auto_ptr<TSocket> s(OpenSocket(_eh));
+   std::unique_ptr<TSocket> s(OpenSocket(_eh));
 
    fRequest.fMode = FileUrlRequest::kPullNext;
 
@@ -721,7 +721,7 @@ void FileUrlClient::GetLastFile()
       return;
    }
 
-   std::auto_ptr<TSocket> s(OpenSocket(_eh));
+   std::unique_ptr<TSocket> s(OpenSocket(_eh));
 
    fRequest.fMode = FileUrlRequest::kPullLast;
 
@@ -748,7 +748,7 @@ void FileUrlClient::BeginServerPushMode()
 
    try
    {
-      std::auto_ptr<TSocket> s(OpenSocket(_eh));
+      std::unique_ptr<TSocket> s(OpenSocket(_eh));
       fRequest.fMode = FileUrlRequest::kServerPush;
       SendRequest(*s, fRequest, _eh);
       fSocket = s.release();
diff --git a/Fireworks/Macros/eve_macros.cc b/Fireworks/Macros/eve_macros.cc
index 6837bf5..d1c4424 100644
--- a/Fireworks/Macros/eve_macros.cc
+++ b/Fireworks/Macros/eve_macros.cc
@@ -136,7 +136,7 @@ TEveGeoShape * clone( const TEveElement * element, TEveElement * parent /* = 0 *
 {
   TEveGeoShape* shape = new TEveGeoShape( get_name(element), get_title(element) );
 
-  std::auto_ptr<TGeoMatrix> matrix( get_transform(element) );
+  std::unique_ptr<TGeoMatrix> matrix( get_transform(element) );
   shape->SetTransMatrix( matrix.get() );
   delete matrix;
 
diff --git a/Fireworks/Muons/plugins/FWCSCStripDigiProxyBuilder.cc b/Fireworks/Muons/plugins/FWCSCStripDigiProxyBuilder.cc
index e90b186..1a7cfa8 100644
--- a/Fireworks/Muons/plugins/FWCSCStripDigiProxyBuilder.cc
+++ b/Fireworks/Muons/plugins/FWCSCStripDigiProxyBuilder.cc
@@ -90,7 +90,7 @@ FWCSCStripDigiProxyBuilder::build(const FWEventItem* iItem, TEveElementList* pro
          TEveStraightLineSet* stripDigiSet = new TEveStraightLineSet();
          setupAddElement(stripDigiSet, product);
              
-         if( std::find_if( adcCounts.begin(), adcCounts.end(), bind2nd( std::greater<int>(), signalThreshold )) != adcCounts.end()) 
+         if( std::find_if( adcCounts.begin(), adcCounts.end(), bind( std::greater<int>(), std::placeholders::_1, signalThreshold )) != adcCounts.end()) 
          {
             stripDigiSet->SetLineWidth(3);
             int stripId = (*dit).getStrip();  
diff --git a/Fireworks/Muons/src/FWMuonBuilder.cc b/Fireworks/Muons/src/FWMuonBuilder.cc
index fe54761..376c7a0 100644
--- a/Fireworks/Muons/src/FWMuonBuilder.cc
+++ b/Fireworks/Muons/src/FWMuonBuilder.cc
@@ -73,7 +73,7 @@ void addMatchInformation( const reco::Muon* muon,
   const std::vector<reco::MuonChamberMatch>& matches = muon->matches();
    
   //need to use auto_ptr since the segmentSet may not be passed to muonList
-  std::auto_ptr<TEveStraightLineSet> segmentSet( new TEveStraightLineSet );
+  std::unique_ptr<TEveStraightLineSet> segmentSet( new TEveStraightLineSet );
   // FIXME: This should be set elsewhere.
   segmentSet->SetLineWidth( 4 );
 
diff --git a/Fireworks/Tracks/plugins/FWTrackHitsDetailView.cc b/Fireworks/Tracks/plugins/FWTrackHitsDetailView.cc
index d38d47e..a100687 100644
--- a/Fireworks/Tracks/plugins/FWTrackHitsDetailView.cc
+++ b/Fireworks/Tracks/plugins/FWTrackHitsDetailView.cc
@@ -102,8 +102,9 @@ FWTrackHitsDetailView::build (const FWModelId &id, const reco::Track* track)
    for( TEveElement::List_i i = m_modules->BeginChildren(), end = m_modules->EndChildren(); i != end; ++i )
    {
       TEveGeoShape* gs = dynamic_cast<TEveGeoShape*>(*i);
+       const auto & rhs = *(*(i));
       if (gs == nullptr && (*i != nullptr)) {
-        std::cerr << "Got a " << typeid(**i).name() << ", expecting TEveGeoShape. ignoring (it must be the clusters)." << std::endl;
+        std::cerr << "Got a " << typeid(rhs).name() << ", expecting TEveGeoShape. ignoring (it must be the clusters)." << std::endl;
         continue;
       }
       gs->SetMainTransparency(75);
diff --git a/Fireworks/Tracks/src/TrackUtils.cc b/Fireworks/Tracks/src/TrackUtils.cc
index a8cc74b..f9331b4 100644
--- a/Fireworks/Tracks/src/TrackUtils.cc
+++ b/Fireworks/Tracks/src/TrackUtils.cc
@@ -359,7 +359,8 @@ addSiStripClusters( const FWEventItem* iItem, const reco::Track &t, class TEveEl
    {
       for( trackingRecHit_iterator it = t.recHitsBegin(), itEnd = t.recHitsEnd(); it != itEnd; ++it )
       {
-         if( typeid( **it ) == typeid( SiStripRecHit2D ))
+          const auto & rhs = *(*(it));
+         if(  typeid( rhs ) == typeid( SiStripRecHit2D ))
          {
             const SiStripRecHit2D &hit = static_cast<const SiStripRecHit2D &>( **it );
             if( hit.cluster().isNonnull() && hit.cluster().isAvailable())
@@ -370,7 +371,7 @@ addSiStripClusters( const FWEventItem* iItem, const reco::Track &t, class TEveEl
                break;
             }
          }
-         else if( typeid( **it ) == typeid( SiStripRecHit1D ))
+         else if( typeid( rhs ) == typeid( SiStripRecHit1D ))
          {
             const SiStripRecHit1D &hit = static_cast<const SiStripRecHit1D &>( **it );
             if( hit.cluster().isNonnull() && hit.cluster().isAvailable())
@@ -520,7 +521,8 @@ pushNearbyPixelHits( std::vector<TVector3> &pixelPoints, const FWEventItem &iIte
    const edmNew::DetSetVector<SiPixelCluster> * allClusters = nullptr;
    for( trackingRecHit_iterator it = t.recHitsBegin(), itEnd = t.recHitsEnd(); it != itEnd; ++it)
    {
-      if( typeid(**it) == typeid( SiPixelRecHit ))
+       const auto & rhs  = *(*(it));
+      if( typeid( rhs ) == typeid( SiPixelRecHit ))
       {
          const SiPixelRecHit &hit = static_cast<const SiPixelRecHit &>(**it);
          if( hit.cluster().isNonnull() && hit.cluster().isAvailable())
diff --git a/PhysicsTools/Utilities/interface/Expression.h b/PhysicsTools/Utilities/interface/Expression.h
index 40145a3..2e55036 100644
--- a/PhysicsTools/Utilities/interface/Expression.h
+++ b/PhysicsTools/Utilities/interface/Expression.h
@@ -33,7 +33,7 @@ namespace funct {
    inline double operator()() const { return (*_f)(); }
    inline std::ostream& print(std::ostream& cout) const { return _f->print(cout); }
  private:
-   std::auto_ptr<AbsExpression> _f;
+   std::unique_ptr<AbsExpression> _f;
  };
 
  inline std::ostream& operator<<(std::ostream& cout, const Expression& e) { 
@@ -64,7 +64,7 @@ namespace funct {
    inline FunctExpression& operator=(const FunctExpression& e) { _f.reset(e._f->clone()); return *this; }
    inline double operator()(double x) const { return (*_f)(x); }
  private:
-   std::auto_ptr<AbsFunctExpression> _f;
+   std::unique_ptr<AbsFunctExpression> _f;
  };
 
 }
diff --git a/PhysicsTools/Utilities/interface/NumericalIntegration.h b/PhysicsTools/Utilities/interface/NumericalIntegration.h
index 7adb590..b8ed57f 100644
--- a/PhysicsTools/Utilities/interface/NumericalIntegration.h
+++ b/PhysicsTools/Utilities/interface/NumericalIntegration.h
@@ -146,7 +146,7 @@ namespace funct {
     ROOT::Math::IntegrationOneDim::Type type_;
     double absTol_, relTol_;
     unsigned int size_, rule_;
-    mutable std::auto_ptr<ROOT::Math::Integrator> integrator_;
+    mutable std::unique_ptr<ROOT::Math::Integrator> integrator_;
   };    
 }
 
diff --git a/PhysicsTools/Utilities/interface/RootMinuit.h b/PhysicsTools/Utilities/interface/RootMinuit.h
index 6d3950d..d445428 100644
--- a/PhysicsTools/Utilities/interface/RootMinuit.h
+++ b/PhysicsTools/Utilities/interface/RootMinuit.h
@@ -181,7 +181,7 @@ namespace fit {
     std::map<std::string, size_t> parIndices_;
     bool initialized_;
     double minValue_;
-    std::auto_ptr<TMinuit> minuit_;
+    std::unique_ptr<TMinuit> minuit_;
     std::vector<boost::shared_ptr<double> > pars_;
     static std::vector<boost::shared_ptr<double> > *fPars_;
     bool verbose_;
diff --git a/SimDataFormats/GeneratorProducts/interface/GenEventInfoProduct.h b/SimDataFormats/GeneratorProducts/interface/GenEventInfoProduct.h
index 5447941..a180d2e 100644
--- a/SimDataFormats/GeneratorProducts/interface/GenEventInfoProduct.h
+++ b/SimDataFormats/GeneratorProducts/interface/GenEventInfoProduct.h
@@ -86,7 +86,7 @@ class GenEventInfoProduct {
 	double			alphaQCD_, alphaQED_;
 
 	// optional PDF info
-	std::auto_ptr<PDF>	pdf_;
+	std::unique_ptr<PDF>	pdf_;
 
 	// If event was produced in bis, this contains
 	// the values that were used to define which
diff --git a/SimDataFormats/GeneratorProducts/interface/LHEEventProduct.h b/SimDataFormats/GeneratorProducts/interface/LHEEventProduct.h
index 5def811..acaa208 100644
--- a/SimDataFormats/GeneratorProducts/interface/LHEEventProduct.h
+++ b/SimDataFormats/GeneratorProducts/interface/LHEEventProduct.h
@@ -27,7 +27,7 @@ class LHEEventProduct {
 	LHEEventProduct(LHEEventProduct&& other) {
 	  hepeup_ = std::move(other.hepeup_);
 	  comments_ = std::move(other.comments_);
-	  pdf_ = other.pdf_; // auto_ptr, so copy is actually a move
+	  pdf_ = std::move(other.pdf_); // unique_ptr, so copy must be a move
 	  weights_ = std::move(other.weights_);
 	  originalXWGTUP_ = std::move(other.originalXWGTUP_);
 	  scales_ = std::move(other.scales_);
@@ -37,7 +37,7 @@ class LHEEventProduct {
 	LHEEventProduct& operator=(LHEEventProduct&& other) {
 	  hepeup_ = std::move(other.hepeup_);
 	  comments_ = std::move(other.comments_);
-	  pdf_ = other.pdf_; // auto_ptr, so copy is actually a move
+	  pdf_ = std::move(other.pdf_); //unique_ptr, so copy must be a move
 	  weights_ = std::move(other.weights_);
 	  originalXWGTUP_ = std::move(other.originalXWGTUP_);
 	  scales_ = std::move(other.scales_);
@@ -119,7 +119,7 @@ class LHEEventProduct {
     private:
 	lhef::HEPEUP			hepeup_;
 	std::vector<std::string>	comments_;
-	std::auto_ptr<PDF>		pdf_;
+	std::unique_ptr<PDF>		pdf_;
 	std::vector<WGT>                weights_;
 	double                          originalXWGTUP_;
         std::vector<float>              scales_; //scale value used to exclude EWK-produced partons from matching
diff --git a/SimDataFormats/GeneratorProducts/src/classes_def.xml b/SimDataFormats/GeneratorProducts/src/classes_def.xml
index 637e608..1dc49f3 100644
--- a/SimDataFormats/GeneratorProducts/src/classes_def.xml
+++ b/SimDataFormats/GeneratorProducts/src/classes_def.xml
@@ -16,7 +16,8 @@
     <class name="HepMC::GenCrossSection" ClassVersion="10">
      <version ClassVersion="10" checksum="920043842"/>
     </class>
-	<class name="HepMC::WeightContainer" ClassVersion="14">
+	<class name="HepMC::WeightContainer" ClassVersion="15">
+  <version ClassVersion="15" checksum="376377869"/>
   <version ClassVersion="10" checksum="2163093401"/>
   <version ClassVersion="11" checksum="376377869"/>
   <version ClassVersion="12" checksum="2537869863"/>
@@ -46,9 +47,7 @@
 	<class name="HepMC::GenEvent::vertex_const_iterator"/>
 	<class name="std::vector&lt;HepMC::GenParticle*&gt;"/>
 	<!-- <class name="std::iterator&lt;std::forward_iterator_tag,HepMC::GenVertex*,int,HepMC::GenVertex**,HepMC::GenVertex*& &gt;"/> -->
-	<class pattern="std::iterator&lt;std::forward_iterator_tag,HepMC::GenVertex*&gt;"/>
 	<!-- <class name="std::iterator&lt;std::forward_iterator_tag,HepMC::GenParticle*,int,HepMC::GenParticle**,HepMC::GenParticle*& &gt;"/> -->
-	<class pattern="std::iterator&lt;std::forward_iterator_tag,HepMC::GenParticle*&gt;"/>
 	<!--
 		<class name="HepMC::GenVertex::edge_iterator">
 			<field name="m_set_iter" transient="true"/>
@@ -88,7 +87,6 @@
 	<class name="gen::PdfInfo" ClassVersion="10">
   <version ClassVersion="10" checksum="876888052"/>
  </class>
-	<class name="std::auto_ptr&lt;gen::PdfInfo&gt;"/>
 
 	<!-- GenRunInfoProduct -->
 
@@ -155,7 +153,8 @@
 
 	<!-- GenEventInfoProduct -->
 
- <class name="GenEventInfoProduct" ClassVersion="11">
+ <class name="GenEventInfoProduct" ClassVersion="12">
+  <version ClassVersion="12" checksum="4234939286"/>
   <version ClassVersion="11" checksum="4154339631"/>
   <version ClassVersion="10" checksum="2479857328"/>
  </class>
@@ -191,11 +190,12 @@
 	<class name="LHERunInfoProduct" ClassVersion="10">
   <version ClassVersion="10" checksum="2098560362"/>
  </class>
-	<class name="LHEEventProduct" ClassVersion="13">
+	<class name="LHEEventProduct" ClassVersion="14">
   <version ClassVersion="10" checksum="1026978494"/>
   <version ClassVersion="11" checksum="619154414"/>
   <version ClassVersion="12" checksum="259352862"/>
   <version ClassVersion="13" checksum="3927731647"/>
+  <version ClassVersion="14" checksum="905719452"/>
  </class>
  <ioread sourceClass = "LHEEventProduct" version="[-12]" targetClass="LHEEventProduct" source = "" target="npLO_">
     <![CDATA[npLO_ = -99;]]>
